<dec f='codebrowser/include/SFML/Graphics/Shader.hpp' l='140' type='bool sf::Shader::loadFromFile(const std::string &amp; vertexShaderFilename, const std::string &amp; fragmentShaderFilename)'/>
<doc f='codebrowser/include/SFML/Graphics/Shader.hpp' l='121'>////////////////////////////////////////////////////////////
    /// \brief Load both the vertex and fragment shaders from files
    ///
    /// This function loads both the vertex and the fragment
    /// shaders. If one of them fails to load, the shader is left
    /// empty (the valid shader is unloaded).
    /// The sources must be text files containing valid shaders
    /// in GLSL language. GLSL is a C-like language dedicated to
    /// OpenGL shaders; you&apos;ll probably need to read a good documentation
    /// for it before writing your own shaders.
    ///
    /// \param vertexShaderFilename   Path of the vertex shader file to load
    /// \param fragmentShaderFilename Path of the fragment shader file to load
    ///
    /// \return True if loading succeeded, false if it failed
    ///
    /// \see loadFromMemory, loadFromStream
    ///
    ////////////////////////////////////////////////////////////</doc>
<def f='codebrowser/src/SFML/Graphics/Shader.cpp' l='264' ll='284' type='bool sf::Shader::loadFromFile(const std::string &amp; vertexShaderFilename, const std::string &amp; fragmentShaderFilename)'/>
<doc f='codebrowser/src/SFML/Graphics/Shader.cpp' l='263'>////////////////////////////////////////////////////////////</doc>
